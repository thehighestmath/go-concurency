package task10

// Task 10: Barrier Synchronization
// Реализуйте barrier - механизм синхронизации, который заставляет
// все горутины ждать друг друга перед продолжением выполнения.

// "fmt"
// "sync"

// Barrier обеспечивает синхронизацию горутин
type Barrier struct {
	// TODO: Добавьте необходимые поля
	// Вам понадобятся:
	// - mutex для синхронизации
	// - cond для ожидания
	// - счетчик ожидающих горутин
	// - общее количество горутин
}

// NewBarrier создает новый barrier для n горутин
func NewBarrier(n int) *Barrier {
	// TODO: Реализуйте конструктор
	return nil
}

// Wait блокирует горутину до тех пор, пока все n горутин не вызовут Wait
func (b *Barrier) Wait() {
	// TODO: Реализуйте метод
	// 1. Заблокируйте mutex
	// 2. Увеличьте счетчик ожидающих
	// 3. Если не все горутины пришли - ждите на cond
	// 4. Если все пришли - разбудите всех и сбросьте счетчик
	// 5. Разблокируйте mutex
}

// BarrierExample демонстрирует использование barrier
func BarrierExample(numGoroutines int) []int {
	// TODO: Реализуйте эту функцию
	// 1. Создайте barrier для numGoroutines горутин
	// 2. Запустите numGoroutines горутин
	// 3. Каждая горутина должна:
	//    - выполнить какую-то работу
	//    - вызвать barrier.Wait()
	//    - выполнить еще одну работу после barrier
	// 4. Соберите результаты от всех горутин
	// 5. Верните слайс результатов

	return nil
}
